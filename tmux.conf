set -g allow-passthrough all

set-option -g default-terminal "xterm-ghostty"
set-option -as terminal-features ",xterm-ghostty:RGB"

set-option -g cursor-style blinking-bar

set-option -g focus-events on

set-option -g mode-keys vi

# Prevent tmux from waiting half a second before processing the ESC key, see:
# http://unix.stackexchange.com/a/25638/176805
set-option -s escape-time 0

# Enable proper mouse support and integration between tmux and system
# copy/paste buffer
# http://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/
# set-option -g mouse off

## Keybindings

# Use ` instead of C-b as prefix key, see:
# http://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/
unbind-key C-b
set-option -g prefix `
bind-key ` send-prefix

unbind-key '%'
bind-key '|' 'split-window -h -c "#{pane_current_path}"'
unbind-key '"'
bind-key "\\" 'split-window -v -c "#{pane_current_path}"'

# refresh tmux after switching sessions to update
# status-right content (tms sessions)
bind-key -n 'C-,' switch-client -p\; refresh-client -S
bind-key -n 'C-.' switch-client -n\; refresh-client -S

bind-key t run-shell "tmux-sessionizer"
# bind-key t display-popup -E "tms"
bind-key -n 'M-s' run-shell "tmux-switcher"

# no confirm kill pane
bind-key x kill-pane

# no confirm kill window
bind-key w kill-window

# no confirm kill session
bind-key q kill-session

# create new session with name prompt
bind-key n command-prompt -p 'New session name:' 'new-session -s %1'

bind-key -n 'C-[' previous-window
bind-key -n 'C-]' next-window

bind-key p 'paste-buffer -p'

# Keybinding for reloading .tmux.conf.
bind-key R source-file ~/.tmux.conf

# Keybindings for swapping adjacent windows.
bind-key '<' 'swap-window -t -1 ; select-window -t -1'
bind-key '>' 'swap-window -t +1 ; select-window -t +1'

# Keybinding for inserting a window.
# Adapted from http://superuser.com/a/704551/326239
bind-key I command-prompt -p 'Insert window at:' '      \
    run-shell "                                     \
        if tmux select-window -t %1; then           \
            tmux new-window -a;                     \
            tmux swap-window -s %1 -t \$((%1+1));   \
        else                                        \
            tmux new-window;                        \
            tmux move-window -t %1;                 \
        fi;                                         \
        tmux select-window -t #{window_id};         \
        tmux select-window -t %1;                   \
    "'

bind-key -n 'C-;' last-window
bind-key -n "C-'" 'switch-client -l'

# select first window
bind-key -n 'C-{' select-window -t ':^'

# select last window
bind-key -n 'C-}' select-window -t ':$'

bind-key -T 'copy-mode-vi' 'C-n' 'send-keys -X next-prompt'
bind-key -T 'copy-mode-vi' 'C-p' 'send-keys -X previous-prompt'

bind-key -T 'copy-mode-vi' 'v' 'send-keys -X begin-selection'
bind-key -T 'copy-mode-vi' 'y' 'send-keys -X copy-selection'

# restart pane back to command prompt
bind-key r 'respawn-pane -k'

# close all panes (except active pane) in active window
bind-key o 'kill-pane -a'

# Open new windows in the same directory as the current pane.
bind-key c 'new-window -c "#{pane_current_path}" ;'

# bring marked pane to active window
bind-key M join-pane

# move active pane out to its own window
bind-key b break-pane

## Status bar

# The following code is adapted from:
# https://coderwall.com/p/trgyrq/make-your-tmux-status-bar-responsive
# It provides the same appearance as https://github.com/powerline/powerline,
# but sidesteps the environment/configuration hell which that project
# introduces.

# Format to display on the left-hand side of the status bar.
# Note that the conditional #{?cond,true,false} operator does not do any
# fancy parsing, so you can't have literal commas in the conditions --
# this will cause the conditions to be split up. So we have to use multiple
# style #[attr=value] directives.
set-option -g status-left '\
#{?client_prefix,\
#[fg=colour254]#[bg=colour31],\
#[fg=colour16]#[bg=colour254]#[bold]}\
 #{=80:session_name}\
 #{?client_prefix,\
#[fg=colour31],\
#[fg=colour254]}\
#[bg=colour234,nobold] '

# Maximum length of the format displayed on the left-hand side.
# Since the maximum length of the session name is limited in the above
# format string, this number is unimportant -- it just needs to be a
# bit larger than what is allocated for the session name, to allow for
# the surrounding characters.
set-option -g status-left-length 90

# Format to display on the right-hand side of the status bar.
# set-option -g status-right ''
set-option -g status-right ' #[fg=colour254]#(tms sessions)'

# Format to display for the current window.
set-option -g window-status-current-format "\
#[fg=colour117,bg=colour31] #{window_index}#{window_flags} \
#[fg=colour231,bold]#{window_name} #[fg=colour31,bg=colour234,nobold] "

# Format to display for other windows.
set-option -g window-status-format "\
#[fg=colour244,bg=colour234]#{window_index}#{window_flags} \
#[fg=colour249]#{window_name} "

# Background color for parts of the status bar not specified by the above
# formats. For instance, the empty space to the right, and the single
# spaces between instances of window-status-format.
set-option -g status-bg colour234

# Inhibit the default styling for windows with unseen activity, which
# looks blatantly incorrect with the "powerline" theme we are trying to
# emulate.
set-window-option -g window-status-activity-style none
set-window-option -g window-status-activity-style none

# Update the status bar every second, instead of the default 15(!)
# seconds. It doesn't look like it's possible to update more than
# once per second, unfortunately.
set-option -g status-interval 1

## Appearance

# Show an indicator in the status bar on windows with unseen activity.
set-option -g monitor-activity on

# Make the borders of the current pane the same color as the borders
# of other panes. This is because the borders of the marked pane are
# *inverted*, and while different foreground colors in different parts
# of the frame are not too objectionable, different background colors
# look very bad.
set-option -g pane-active-border-style none

## Miscellaneous

# When the current session is killed, switch to another session instead of
# detaching.
set-option -g detach-on-destroy off

# Show messages until they are dismissed, instead of for 750 milliseconds(!).
# Actually it is only for an hour, because it doesn't seem like you can turn
# off the time limit.
set-option -g display-time 36000000

# Automatically renumber windows when one is deleted, see:
# http://unix.stackexchange.com/a/51879/176805
set-option -g renumber-windows on

# Number windows and panes from 1, instead of 0; see:
# http://unix.stackexchange.com/a/35932/176805
set-option -g base-index 1
set-window-option -g pane-base-index 1

# Increase the scrollback buffer size from 2000 to a larger size, but
# not one so large that tmux begins to lag.
set-option -g history-limit 100000

# Activate OFF mode
bind-key -n F12 '\
    set prefix None ; \
    set key-table off ; \
    set status-left "#[fg=colour16]#[bg=orange]#[bold] #{=80:session_name} #[fg=colour254]#[bg=colour234,nobold] " ;'

# Disable OFF mode
bind -T off F12 '\
    set -u prefix ; \
    set -u key-table ; \
    set -u status-left ;'


bind-key -n "C-\\" if -F "#{@pane-is-vim}" { send-keys "C-\\" } { select-pane -l }

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi "C-\\" select-pane -l

not_tmux="ps -o state= -o comm= -t '#{pane_tty}' | \
  grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(g?(view|n?vim?x?)(diff)?|fzf)$'"

# Smart pane switching with awareness of Neovim/fzf/etc. splits
bind-key -n C-h if "$not_tmux" { send-keys C-h } { select-pane -L }
bind-key -n C-j if "$not_tmux" { send-keys C-j } { select-pane -D }
bind-key -n C-k if "$not_tmux" { send-keys C-k } { select-pane -U }
bind-key -n C-l if "$not_tmux" { send-keys C-l } { select-pane -R }

# Smart pane resizing with awareness of Neovim/fzf/etc. splits.
bind-key -n M-h if "$not_tmux" { send-keys M-h } { resize-pane -L 3 }
bind-key -n M-j if "$not_tmux" { send-keys M-j } { resize-pane -D 3 }
bind-key -n M-k if "$not_tmux" { send-keys M-k } { resize-pane -U 3 }
bind-key -n M-l if "$not_tmux" { send-keys M-l } { resize-pane -R 3 }

bind-key -n M-H if "$not_tmux" { send-keys M-H } {
  swap-pane -t '{left-of}'; last-pane
}

bind-key -n M-J if "$not_tmux" { send-keys M-J } {
  swap-pane -t '{down-of}'; last-pane
}

bind-key -n M-K if "$not_tmux" { send-keys M-K } {
  swap-pane -t '{up-of}'; last-pane
}

bind-key -n M-L if "$not_tmux" { send-keys M-L } {
  swap-pane -t '{right-of}'; last-pane
}


# create tmux run directory structure
# run-shell -b "tmux-rundir"
